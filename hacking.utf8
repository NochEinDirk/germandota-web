/* germandota.de - Sources of the website
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

======================================================================

Table of Contents
*****************

    I. Coding Guidelines

   II. Easiest Git workflow

  III. Installing Apache httpd on a Debian system

======================================================================

I.  Coding Guidelines
    *****************

a) If it possible then prevent that lines of code are longer than 70
   CHARCTERS PER LINE.

b) If you are not sure how to format or document or what ever
   something then consider the

     - GNU Coding Standards
       http://www.gnu.org/prep/standards/

c) If you ADD A NEW FILE to this project THEN ADD THE FOLLOWING
   LICENSE text at the beginning of that file to prevent abusing of
   your code

/* germandota.de - Sources of the website
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

======================================================================

II.  Easiest Git workflow
     ********************

1. Setting up a branch at your local machine where you can work and
   commit.

  a) Fork this project from the origin repository to your GitHub
     account via web interface at

       https://github.com/germandota-de/germandota-web

     Your forked repository on GitHub will be known as upstream.

  b) Clone the official (aka origin) repository to your local machine

       sandbox$> \
         git clone https://github.com/germandota-de/germandota-web.git

  c) Configure the upstream repository so that you are able to push
     (upload) to GitHub.  Replace <ACCOUNT> with your GitHub account:

       sandbox/germandota-web$> \
         git config remote.upstream.url https://github.com/<ACCOUNT>/germandota-web.git

  d) Create a branch for your work from master branch which will be
     tracked and check it out into your working tree

       sandbox/germandota-web$> git branch --track my-contribution
       sandbox/germandota-web$> git checkout my-contribution

  x.1) Optionally (if not globally configured) add your real name and
       email for commits

         sandbox/germandota-web$> git config user.name "Martin Dota"
         sandbox/germandota-web$> git config user.email thats.me@email.org

  x.2) Optionally you can check (or edit) your configuration with a
       text editor by opening the file.  Use [$> git help config] for
       more details

         sandbox/germandota-web$> emacs .git/config

----------------------------------------------------------------------

2. This could be the workflow of an hacking session:

   a) At the beginning you should check the origin/master branch for
      updates from other contributors and rebase these into your local
      branch

        sandbox/germandota-web$> git checkout master
        sandbox/germandota-web$> git pull

        sandbox/germandota-web$> git checkout my-contribution
        sandbox/germandota-web$> git pull --rebase

   b) Repeatedly make your changes, check your changes and commit
      these into your local branch

        sandbox/germandota-web$> emacs bar/foo.php
        sandbox/germandota-web$> git add bar/foo.php
           ...
        sandbox/germandota-web$> git commit -a

      also for your interest during this phase

        sandbox/germandota-web$> git status
        sandbox/germandota-web$> git diff
        sandbox/germandota-web$> git log

   c) At the end of your hacking session you should upload (push) your
      changes into your GitHub repository (aka upstream)

        sandbox/germandota-web$> git branch
            ...
          * my-contribution
            ...

        sandbox/germandota-web$> git push upstream

----------------------------------------------------------------------

3. If your contribution is ready to use then you can create a pull
   request via web interface to push your changes to the official
   origin repository.  You can do this by clicking the green button at
   (replace <ACCOUNT>)

     https://github.com/<ACCOUNT>/germandota-web

   and choose after clicking the `Edit'-Button

     * base fork: germandota-de/germandota-web

     * base: master

     * head fork: <ACCOUNT>/germandota-web

     * compare: my-contribution

  After that a maintainer will be informed and react to your pull
  request.

======================================================================

III.  Installing Apache httpd on a Debian system
      ******************************************

1. Install Apache httpd via apt package manager as root

     root$> apt-get install libapache2-mod-php

2. Change as root the directive DocumentRoot in the configuration file

     root$> emacs /etc/apache2/sites-available/000-default.conf

   to the www directory of your contribution branch (see section
   `Easiest Git workflow')

     DocumentRoot <path-to>/germandota-web/www

3. Make sure that localhost (and only localhost) has access to that
   directory and .htaccess can override.  For that check in file

     root$> emacs /etc/apache2/sites-available/000-default.conf

   if the following lines are existing

     <Directory <path-to>/germandota-web/www/>
         ...
       AllowOverride All
       Require ip ::1 127.0.0.1
         ...
     </Directory>

4. Restart the httpd as root

     root$> apache2ctl restart

5. Test if your setup is working by entering into your web browser

     http://localhost

   you should see a message like

     * `config.inc.php not found!'

6. Copy germandota-web/config.templ.inc.php to config.inc.php and edit
   this copied file

     germandota-web$> cp config.templ.inc.php config.inc.php
     germandota-web$> emacs config.inc.php

======================================================================
